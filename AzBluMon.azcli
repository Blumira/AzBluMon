#!/bin/bash
# Author: Justin Kikani 5/18/2022
# Purpose: To simplify the creation of the event hubs integration for blumira within Azure, 
# this is meant to turn on the diagnostic settings for Azure resources located within the 
# same resource group as the created namespace name, due to the way licensing works within Azure
# this script does not encompass metrics enablement or the ability to turn on Azure Active Directory
# or Defender integrations, this is in the same vein as poshim for automated windows logging

# Parameters for end-user to change to match their environment and resources, most can be found by logging in to portal.azure.com
# This assumes they already have a subscription and a resource group in their environment
# In the future this could be replaced with echos to get the user to type these in or copy from their environment
# The location should be where the majority of your resources are deployed
myLocation="eg centralus,eastus,westus2"
# Must be a resource group that currently exists in your Subscription
myResourceGroup="name of RG"
# Subscription ID can be found @ https://portal.azure.com/#blade/Microsoft_Azure_Billing/SubscriptionsBlade
# Copy and paste the ID replacing the value in the quotes
mySubscriptionID="eg f7c0XXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"
# Must be unique, recommend to namespace inline with your naming scheme eg COMPANYNAME-blueventhubns01
myEventHubNamespace="must be unique no spaces"
# Statically set to reduce friction but this value can be changed to suit your preferences or needs
myEventHubName="blueventhub"

# Have user login to their tenant, uncomment below line if running from local Azure CLI instance
#az login

# Set the Subscription that you'll be working with by ID, more reliable than name
az account set \
    --name $mySubscriptionID

# Create the Azure Event Hub Namespace
az eventhubs namespace create \
    --name $myEventHubNamespace \
    --resource-group $myResourceGroup \
    --location $myLocation \
    --sku Basic \
    --capacity 1 \
    --enable-auto-inflate false

# Set SAS Auth and Rules for Event Hub
az eventhubs namespace authorization-rule create \
    --namespace-name $myEventHubNamespace \
    --resource-group $myResourceGroup \
    --name "LogsToBlumira" \
    --rights Listen

# Create the Azure Event Hub
az eventhubs eventhub create \
    --name $myEventHubName \
    --namespace-name $myEventHubNamespace \
    --resource-group $myResourceGroup \
    --partition-count 2 \
    --message-retention 1

# Get and store the resource ID for the event hub just created
myEventHubID=$(az eventhubs eventhub show --name $myEventHubName --resource-group $myResourceGroup --namespace-name $myEventHubNamespace --query "id" -o tsv)

# Get and store the authorization ID for the rootManagedShareKey rule for continued setup of resources
myRuleID=$(az eventhubs namespace authorization-rule list --resource-group $myResourceGroup --namespace-name $myEventHubNamespace --query "[?name == 'RootManageSharedAccessKey'].id" -o tsv)

# Register Microsoft.Insights resource provider for subscription/tenant
az provider register --namespace "Microsoft.Insights"

# Set diagnostic settings for all resources in the resource group to the previously created event hub
# Start with creating array of resource IDs to iterate through
resourceIDs=($(az resource list -g $myResourceGroup --query "[].id" -o tsv))
for resourceID in "${resourceIDs[@]}"; do
    # Check if any resources are storage accounts
    resourceType=$(az resource show -g $myResourceGroup --id $resourceID --query "type" -o tsv)
    # If there are any storage accounts set defaults for each resource underneath blob, files, table, queue
    if [[ $resourceType = "Microsoft.Storage/storageAccounts" ]]; then
        storageResourceIDs=( $resourceID"/blobServices/default" $resourceID"/tableServices/default" $resourceID"/queueServices/default" $resourceID"/fileServices/default" ) 
        for storageResourceID in "${storageResourceIDs[@]}"; do
            logString="["
            # For each resource ID we need to create another array to iterate through to create the log settings for each log category
            storageLogCategories=($(az monitor diagnostic-settings categories list --resource $storageResourceID --query "value[?categoryType == 'Logs'].[name]" -o tsv))
            # Loop through each category to build json
            for storageLogCategory in "${storageLogCategories[@]}"; do
                logString+='{"category":' 
                logString+='"'"$storageLogCategory"'",'
                logString+='"enabled": true, "retentionPolicy": {"enabled": false, "days": 0 }},'
            done
            # Remove last ',' from the json and replace with closing ']'
            modifiedLogString=$logstring
            modifiedLogString=${logString::-1}
            modifiedLogString+="]"
            echo $modifiedLogString > temp.json
            # Create the diagnostic setting for each resource ID with compiled json
            az monitor diagnostic-settings create \
                --name BlumiraDiagSetting \
                --resource $resourceID \
                --resource-group $myResourceGroup \
                --event-hub $myEventHubID \
                --event-hub-rule $myRuleID \
                --logs @./temp.json
        done
    # This section is dedicated to all resources under the az resource list command not including the nested resources
    else
        logString="["
        # For each resource ID we need to create another array to iterate through to create the log settings for each log category
        logCategories=($(az monitor diagnostic-settings categories list --resource $resourceID --query "value[?categoryType == 'Logs'].[name]" -o tsv))
        # Loop through each category to build json
        for logCategory in "${logCategories[@]}"; do
            logString+='{"category":' 
            logString+='"'"$logCategory"'",'
            logString+='"enabled": true, "retentionPolicy": {"enabled": false, "days": 0 }},'
        done
        modifiedLogString=$logstring
        modifiedLogString=${logString::-1}
        modifiedLogString+="]"
        if [[ $modifiedLogString = "]" ]]; then
            echo "Resource not supported"
        else
            echo $modifiedLogString > temp.json
            # Create the diagnostic setting for each resource ID with compiled json
            az monitor diagnostic-settings create \
                --name BlumiraDiagSetting \
                --resource $resourceID \
                --resource-group $myResourceGroup \
                --event-hub $myEventHubID \
                --event-hub-rule $myRuleID \
                --logs @./temp.json
        fi
    fi
done

# Output primary connection string for end-user to copy and use within Blumira
echo "******************************************************************"
echo "******************************************************************"
echo "Primary Connection String (Please copy and paste this in Blumira):"
az eventhubs namespace authorization-rule keys list \
    --resource-group $myResourceGroup \
    --namespace-name $myEventHubNamespace \
    --name "LogsToBlumira" --query "primaryConnectionString" -o tsv
# Output event hub name for end-user to copy and use within Blumira
echo "Event Hub Name (Please copy and past this in Blumira):"
echo $myEventHubName
