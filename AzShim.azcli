#!/bin/bash
# Author: Justin Kikani 
# Initial Release: 5/18/2022
# Last Modified: 11/14/2023
# Version: 2.0.1
# Release Notes: Modularizing the script, adding in functions for configuration and removal. 
# Making the creation process smoother and faster overall. Reducing the amount of loops.
# Eventhubs namespace and other related commands will come out of preview in nov release, 
# was set to preview status by MS on Aug 9 in error.
# Purpose: To simplify the creation of the event hubs integration for blumira within Azure, 
# this is meant to turn on the diagnostic settings for Azure resources located within the 
# same resource group as the created namespace name, due to the way licensing works within Azure
# this script does not encompass metrics enablement or the ability to turn on Azure Active Directory
# or Defender integrations, this is in the same vein as poshim for automated windows logging

# Standardized Blumira Resource Group name
myResourceGroup="blumira-rg"
# Statically set to reduce friction but this value can be changed to suit your preferences or needs
myEventHubName="blumiraeventhub"
# Statically set NameSpaceName
myEventHubNameSpace="blumiraeventhubns"
# Get current subscription Ids
tempSubList=$(az account show --query "[id]" -o tsv | awk -F '\t' '{print $1}' | sort -u)
mySubscriptionIds=($(echo $tempSubList | tr " " "\n"))

function Help() {
    echo "AzShim is an automated deployment tool for configuring your Azure environment for Blumira."
    echo "WARNING! THIS SCRIPT USES THE DATE/TIME FOR NAMESPACING RESOURCES"
    echo "Valid syntax will include AzShim.sh -h|-c|-u"
    echo "For support please contact support@blumira.com"
}

function ConfigureResources() {
    #Register Microsoft.Insights resource provider, won't hurt to re-run if it already is registered
    az provider register --namespace 'microsoft.insights' \
        > /dev/null

    # Get the location id from the subscription
    echo "Getting list of location codes in use within subscription."
    locations=$(az resource list --query "[].location" -o tsv | awk -F '\t' '{print $1}' | sort -u)
    myLocations=($(echo ${locations} | tr " " "\n"))
    
    # Creating Unique Resource Group
    echo "Creating resouce group using epoch for uniqueness."
    # Bypass the global region which appears to be always in the first element
    if [[ ${myLocations[0]} == "global" ]]; then
        az group create --location ${myLocations[1]} --name "${myResourceGroup}-${myEpoch}" -o table
    else
        az group create --location ${myLocations[0]} --name "${myResourceGroup}-${myEpoch}" -o table

    # Create a eventhub namespace for each region found
    for myLocation in "${myLocations[@]}"; do
        if [[ ${myLocation} == "global" ]]; then
            echo "Skipping the Global Region"
        else
            # Create the Azure Event Hub Namespace
            echo "Creating Namespace..."
            az eventhubs namespace create \
                --name "${myEventHubNameSpace}-${myLocation}-${myEpoch}" \
                --resource-group "${myResourceGroup}-${myEpoch}" \
                --location ${myLocation} \
                --sku Basic \
                --capacity 1 \
                --enable-auto-inflate false \
                > /dev/null 2>&1

            # Give time for Azure to enumerate event hub namespace
            echo "Waiting 30s for Namespace creation..."
            sleep 30s

            echo "Creating Event Hub and Authorization Rule under the Namespace..."

            # Create the Azure Event Hub
            az eventhubs eventhub create \
                --name "${myEventHubName}-${myLocation}-${myEpoch}" \
                --namespace-name "${myEventHubNameSpace}-${myLocation}-${myEpoch}" \
                --resource-group "${myResourceGroup}-${myEpoch}" \
                --partition-count 2 \
                --cleanup-policy Delete \
                --retention-time-in-hours 1 \
                --output none \
                > /dev/null 2>&1
            
            echo "Waiting 30s for Event Hub Creation"
            sleep 30s

            # Set SAS Auth and Rules for Event Hub Listener, this is what the sensor uses
            az eventhubs eventhub authorization-rule create \
                --name "LogsToBlumira-${myEpoch}" \
                --eventhub-name "${myEventHubName}-${myLocation}-${myEpoch}" \
                --namespace-name "${myEventHubNameSpace}-${myLocation}-${myEpoch}" \
                --resource-group "${myResourceGroup}-${myEpoch}" \
                --rights Listen \
                --output none \
                > /dev/null 2>&1
            
            # Get and store the authorization ID for the rootManagedShareKey rule for continued setup of resources
            myRuleId=$(az eventhubs namespace authorization-rule show --name "RootManageSharedAccessKey" --resource-group "${myResourceGroup}-${myEpoch}" --namespace-name "${myEventHubNameSpace}-${myLocation}-${myEpoch}" --query "id" -o tsv)
            # Send off data to be used for further configuration
            SetDiagnosticSettings "${myRuleId}" "${myLocation}" "${myEpoch}" "${myEventHubName}"
            # Output primary connection string for end-user to copy and use within Blumira
            echo '******************************************************************'
            echo '******************************************************************'
            echo 'You will need the Primary Connection String and the Event Hub name to copy and paste in the sensor module within Blumira.'
            echo 'Primary Connection String:'
            az eventhubs eventhub authorization-rule keys list \
                --resource-group ${myResourceGroup}-${myEpoch} \
                --eventhub-name "${myEventHubName}-${myLocation}-${myEpoch}" \
                --namespace-name "${myEventHubNameSpace}-${myLocation}-${myEpoch}" \
                --name "LogsToBlumira-${myEpoch}" --query "primaryConnectionString" -o tsv
            # Output event hub name for end-user to copy and use within Blumira
            echo 'Event Hub Name:'
            echo "${myEventHubName}-${myLocation}-${myEpoch}"
            echo '******************************************************************'
            echo '******************************************************************'
        fi
    done
    # Configure the subscription level activity logging/platform logging
    # Re-get the authrule for starting namespace
    # For whatever reason the eventhub name was dereferencing
    # Update 10.27.23: Dereferencing doesn't appear to be happening anymore
    mySubRuleID=$(az eventhubs namespace authorization-rule show --name "RootManageSharedAccessKey" --resource-group "${myResourceGroup}-${myEpoch}" --namespace-name "${myEventHubNameSpace}-${myLocations[0]}-${myEpoch}" --query "id" -o tsv)

    # Create diagnostic settings for Azure Subscription that was specified by the user
    az monitor diagnostic-settings subscription create \
        --name "BlumiraDiagSetting-${myEpoch}" \
        --location ${myLocations[0]} \
        --event-hub-name "${myEventHubName}-${myLocations[0]}-${myEpoch}" \
        --event-hub-auth-rule ${mySubRuleID} \
        --logs '[{"category": "Security","enabled": true},{"category": "Administrative","enabled": true},{"category": "ServiceHealth","enabled": true},{"category": "Alert","enabled": true},{"category": "Recommendation","enabled": true},{"category": "Policy","enabled": true},{"category": "Autoscale","enabled": true},{"category": "ResourceHealth","enabled": true}]' \
        --output none \
        > /dev/null
}

function SetDiagnosticSettings() {
    # Get list of RGs in Sub, Write diagnostic settings
    myResourceGroups=($(az group list --query "[].name" -o tsv))
    # Loop through each Resource Group in the subscription
    for resourceGroup in "${myResourceGroups[@]}"; do
        # Set diagnostic settings for all resources in the resource group to the previously created event hub
        # Start with creating array of resource IDs to iterate through
        resourceIDs=($(az resource list -g ${resourceGroup} --location ${2} --query "[].id" -o tsv))
        for resourceID in "${resourceIDs[@]}"; do
            # Check if any resources are storage accounts
            resourceType=$(az resource show -g ${resourceGroup} --id ${resourceID} --query "type" -o tsv)
            # If there are any storage accounts set diagnostic settings for each default resource type underneath blob, files, table, queue
            case $resourceType in
                Microsoft.Storage/storageAccounts)
                    storageResourceIDs=( ${resourceID}"/blobServices/default" ${resourceID}"/tableServices/default" ${resourceID}"/queueServices/default" ${resourceID}"/fileServices/default" )
                    # For each storage service default resource ID build the log json template on the fly and apply it to the diagnostic setting 
                    for storageResourceID in "${storageResourceIDs[@]}"; do
                        logString="["
                        # For each resource ID we need to create another array to iterate through to create the log settings for each log category
                        storageLogCategories=($(az monitor diagnostic-settings categories list --resource ${storageResourceID} --query "value[?categoryType == 'Logs'].[name]" -o tsv))
                        # Loop through each category to build json
                        for storageLogCategory in "${storageLogCategories[@]}"; do
                            logString+='{"category":' 
                            logString+='"'"$storageLogCategory"'",'
                            logString+='"enabled": true, "retentionPolicy": {"enabled": false, "days": 0 }},'
                        done
                        # Remove last ',' from the json and replace with closing ']'
                        modifiedLogString=$logstring
                        modifiedLogString=${logString::-1}
                        modifiedLogString+="]"
                        echo $modifiedLogString > temp.json
                        # Create the diagnostic setting for each resource ID with compiled json
                        az monitor diagnostic-settings create \
                            --name "BlumiraDiagSetting-${3}" \
                            --resource ${storageResourceID} \
                            --event-hub "${4}-${2}-${3}" \
                            --event-hub-rule ${1} \
                            --logs @./temp.json \
                            --output none \
                            > /dev/null
                    done
                    ;;
                microsoft.devtestlab/*)
                    ;;
                Microsoft.ContainerInstance/*)
                    ;;
                Microsoft.Compute*)
                    ;;
                Microsoft.Network/networkInterfaces)
                    ;;
                Microsoft.Network/networkWatchers)
                    ;;
                "")
                    ;;
                *)
                    logString="["
                    # For each resource ID we need to create another array to iterate through to create the log settings on the fly for each log category
                    logCategories=($(az monitor diagnostic-settings categories list --resource ${resourceID} --query "value[?categoryType == 'Logs'].[name]" -o tsv))
                    # Loop through each category to build json
                    for logCategory in "${logCategories[@]}"; do
                        logString+='{"category":' 
                        logString+='"'"$logCategory"'",'
                        logString+='"enabled": true, "retentionPolicy": {"enabled": false, "days": 0 }},'
                    done
                    modifiedLogString=$logstring
                    modifiedLogString=${logString::-1}
                    modifiedLogString+="]"
                    # Skip this resource nothing exists
                    if [[ $modifiedLogString != "]" ]]; then  
                        echo $modifiedLogString > temp.json
                        # Create the diagnostic setting for each resource ID with compiled json
                        az monitor diagnostic-settings create \
                            --name "BlumiraDiagSetting-${3}" \
                            --resource ${resourceID} \
                            --event-hub "${4}-${2}-${3}" \
                            --event-hub-rule ${1} \
                            --logs @./temp.json \
                            --output none \
                            > /dev/null
                    fi
                    ;;
            esac
        done
    done
}

function Uninstall() {
    identifier=${1}
    # Remove diagnostic settings and need to remove any other items
    # This section needs some work disabling for now
    #temp=$(az resource list --query "[].id" -o tsv | awk -F '\t' '{print $1}' | sort -u)
    #allMyResources=($(echo $temp | tr " " "\n"))
    #for resource in "${allMyResources[@]}"; do
    #    echo az monitor diagnostic-settings delete --name $(az monitor diagnostic-settings list --resource ${resource} --query "[?contains(name, '${identifier}')].name" -o tsv) --resource ${resource} \
    #       > /dev/null 2>&1
    #done
    myResources=$(az resource list --query "[?contains(name, '${identifier}')].id" -o tsv)
    az resource delete --ids ${myResources} \
        > /dev/null 2>&1
    az group delete --name ${myResourceGroup}-${identifier} --yes \
        > /dev/null 2>&1
}

# Main function
while getopts ":hcut" option; do
    case $option in
    h) # Display Help
        Help
        exit;;
    c) # Configurations start here
        # Output Date/Time for Start
        startDateTime=$(date)
        myEpoch=$(date -d "${startDateTime}" +"%s")
        echo "This script is intended for only NA regions only."
        echo "This script will NOT work for GCC environments."
        echo "This script will loop through all of your valid subscriptions."
        echo -e "\n"
        echo "******************************************************************************"
        for mySubscriptionId in "${mySubscriptionIds[@]}"; do
            echo ${mySubscriptionId}
            echo "^ This is the current active subscription that resources will be created in. ^" # This is grabbed at the top so that it's globally available throughout
            echo "******************************************************************************"
            # Set the Subscription that you'll be working with by ID, more reliable than name
            az account set \
                --name ${mySubscriptionId} \
                > /dev/null
            ConfigureResources
        done
        endDateTime=$(date)
        echo "Start time: ${startDateTime}"
        echo "End time:: ${endDateTime}"
        echo -e "\n"
        echo "To remove any created resources use the following command: ./AzShim.azcli -u ${myEpoch}"
        exit;;
    u)
        startDateTime=$(date)
        echo "Removing Blumira resources from your Azure Subscriptions"
        for mySubscriptionId in "${mySubscriptionIds[@]}"; do
            echo ${mySubscriptionId}
            echo "^ This is the current active subscription that resources will be deleted from. ^"
            echo "********************************************************************************"
            echo "You will manually have to remove the diagnostic settings for resources under the"
            echo 'following url: https://portal.azure.com/#view/Microsoft_Azure_Monitoring/AzureMonitoringBrowseBlade/~/diagnosticsLogs'
            # Set the Subscription that you'll be working with by ID, more reliable than name
            az account set \
                --name ${mySubscriptionId} \
                > /dev/null
            Uninstall ${2}
        done
        endDateTime=$(date)
        echo "Start time: ${startDateTime}"
        echo "End time:: ${endDateTime}"
        exit;;
    t) # Testing
        exit;;
    /?)
        echo "Invalid option please try again."
        exit;;
    esac
done
